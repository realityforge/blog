--- 
layout: post
title: Dumping database to YAML fixtures
---
I finally got fed up with the bugs in Rails 1.0 handling of mysql connections and have decided to move to postgres. I have "talked":http://www.realityforge.org/articles/2005/12/02/mysql_to_postgres about the move and even migrated my DDL to the database agnostic "schema":http://api.rubyonrails.com/classes/ActiveRecord/Schema.html language. The one thing I had not yet thought about was how to move my data.

After doing a little bit of "asking":http://www.mail-archive.com/typo-list@rubyforge.org/msg01274.html and "searching":http://comments.gmane.org/gmane.comp.lang.ruby.rails/28315 I decided to just dump my data out the databse to fixtures and then reload these fixtures. This is surprisingly simple using the rake task.

{% highlight ruby %}
desc 'Dump a database to yaml fixtures. '
task :dump_fixtures => :environment do
  path = ENV['FIXTURE_DIR'] || "#{RAILS_ROOT}/data"

  ActiveRecord::Base.establish_connection(RAILS_ENV.to_sym)
  ActiveRecord::Base.connection.
             select_values('show tables').each do |table_name|
    i = 0
    File.open("#{path}/#{table_name}.yml", 'wb') do |file|
      file.write ActiveRecord::Base.connection.
          select_all("SELECT * FROM #{table_name}").inject({}) { |hash, record|
      hash["#{table_name}_#{i += 1}"] = record
        hash
      }.to_yaml
    end
  end
end

desc "Reset Database data to that in fixtures that were dumped"
task :load_dumped_fixtures => :environment do
  require 'active_record/fixtures'
  ActiveRecord::Base.establish_connection(RAILS_ENV.to_sym)
  path = ENV['FIXTURE_DIR'] || "#{RAILS_ROOT}/data"
  Dir.glob("#{path}/*.{yml}").each do |fixture_file|
    Fixtures.create_fixtures(path, File.basename(fixture_file, '.*'))
  end
end
{% endhighlight %}

This is Mysql specific due to the use of 
<code>select_values('show tables')</code> but apparently sqlite usues <code>select_values('.table')</code> and postgres uses the following. 

{% highlight sql %}
 select_values(<<-end_sql
SELECT c.relname
 FROM pg_class c
   LEFT JOIN pg_roles r     ON r.oid = c.relowner
   LEFT JOIN pg_namespace n ON n.oid = c.relnamespace
 WHERE c.relkind IN ('r','')
   AND n.nspname IN ('myappschema', 'public')
   AND pg_table_is_visible(c.oid)
end_sql
{% endhighlight %}

This worked like a charm except when my data contained embedded ERB directives because when rails loads the fixtures it attempts to evaluate the fixture as an ERB script. In this scenario I just needed to nip into the <code>read_fixture_files</code> method in <code>$RUBY_HOME\activerecord-1.13.2\lib\active_record\fixtures.rb</code>
and comment out the erb rendering while I imported my data.

*Update:* The code for this can be found is available in "dump_fixtures.rake":/files/dump_fixtures.rake
